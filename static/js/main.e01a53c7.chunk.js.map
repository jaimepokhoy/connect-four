{"version":3,"sources":["components/Square.jsx","components/Row.jsx","components/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["value","handleClick","column","className","onClick","Row","row","set","map","square","index","Square","key","Grid","useState","currentPlayer","Array","fill","grid","setGrid","winner","setWinner","webSocket","useRef","handleMove","current","send","JSON","stringify","useEffect","WebSocket","onopen","data","console","log","onmessage","parsedData","parse","close","rows","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPACe,cAA2C,IAA/BA,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SAASC,QAAS,kBAAMH,EAAYC,KAChDF,ICFQ,SAASK,EAAT,GAAoC,IAArBC,EAAoB,EAApBA,IAAKL,EAAe,EAAfA,YAE3BM,EAAMD,EAAIE,KAAI,SAACC,EAAQC,GAAT,OAClB,kBAACC,EAAD,CACEV,YAAaA,EACbC,OAAQQ,EACRV,MAAOS,EACPG,IAAKF,OAIT,OAAO,yBAAKP,UAAU,OAAOI,GCRhB,SAASM,IAAQ,IAAD,EACMC,mBAAS,KADf,mBACtBC,EADsB,aAELD,mBAAS,IAAIE,MAAM,GAAGC,KAAK,IAAID,MAAM,GAAGC,KAAK,OAFxC,mBAEtBC,EAFsB,KAEhBC,EAFgB,OAGDL,mBAAS,IAHR,mBAGtBM,EAHsB,KAGdC,EAHc,KAKvBC,EAAYC,iBAAO,MAsBzB,SAASC,EAAWtB,GAClBoB,EAAUG,QAAQC,KAAKC,KAAKC,UAAU,CAAE1B,SAAQa,gBAAeG,UArBjEW,qBAAU,WAiBR,OAhBAP,EAAUG,QAAU,IAAIK,UAVhB,sCAYRR,EAAUG,QAAQM,OAAS,SAACC,GAC1BC,QAAQC,IAAIF,IAGdV,EAAUG,QAAQU,UAAY,YAAe,IAAZH,EAAW,EAAXA,KACzBI,EAAaT,KAAKU,MAAML,GACtBZ,EAAiBgB,EAAjBhB,OAAQF,EAASkB,EAATlB,KAEZE,GACFC,EAAUD,GAGRF,GAAMC,EAAQD,IAEb,kBAAMI,EAAUG,QAAQa,WAC9B,IAMH,IAAMC,EAAOrB,EAAKV,KAAI,SAACF,EAAKI,GAAN,OACpB,kBAACL,EAAD,CAAKO,IAAKF,EAAOJ,IAAKA,EAAKL,YAAauB,OAG1C,OACE,6BACGe,EACAnB,GAAM,qBAAkBA,I,MCnChBoB,MAJf,WACE,OAAO,kBAAC3B,EAAD,OCOW4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.e01a53c7.chunk.js","sourcesContent":["import React from \"react\";\nexport default function ({ value, handleClick, column }) {\n  return (\n    <div className=\"Square\" onClick={() => handleClick(column)}>\n      {value}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Square from \"./Square\";\nexport default function Row({ row, handleClick }) {\n  // console.log(row);\n  const set = row.map((square, index) => (\n    <Square\n      handleClick={handleClick}\n      column={index}\n      value={square}\n      key={index}\n    />\n  ));\n\n  return <div className=\"Row\">{set}</div>;\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Row from \"./Row\";\n\nconst URL = \"ws://connect-four-jp.herokuapp.com\";\n\nexport default function Grid() {\n  const [currentPlayer, setPlayer] = useState(\"X\");\n  const [grid, setGrid] = useState(new Array(6).fill(new Array(6).fill(\"\")));\n  const [winner, setWinner] = useState(\"\");\n\n  const webSocket = useRef(null);\n\n  useEffect(() => {\n    webSocket.current = new WebSocket(URL);\n\n    webSocket.current.onopen = (data) => {\n      console.log(data);\n    };\n\n    webSocket.current.onmessage = ({ data }) => {\n      const parsedData = JSON.parse(data);\n      const { winner, grid } = parsedData;\n\n      if (winner) {\n        setWinner(winner);\n      }\n\n      if (grid) setGrid(grid);\n    };\n    return () => webSocket.current.close();\n  }, []);\n\n  function handleMove(column) {\n    webSocket.current.send(JSON.stringify({ column, currentPlayer, grid }));\n  }\n\n  const rows = grid.map((row, index) => (\n    <Row key={index} row={row} handleClick={handleMove} />\n  ));\n\n  return (\n    <div>\n      {rows}\n      {winner && `Winner is: ${winner}`}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Grid from \"./components/Grid\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Grid />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}